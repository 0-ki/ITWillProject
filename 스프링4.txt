========================================
------- 1일차 (설치 및 설정)------
========================================
 1) spring.io/tools 에서 Window버젼 다운, jar 파일 압축 풀고 contents 압축 풀기.
 2) help->Eclipse Marketplace -> "sts"검색-> Spring Tools 3 Add-on for spring Tools 4 3.9.11.CI 인스톨하기. 컨펌-> accept->Finish.
 3) window -> show view -> server 창 띄우기(검색해서). create new server -> 아파치 8.5. -> Browse에서 아파치 설치된 폴더 등록, JRE = jdk1.8.0_221
 4) File-> New other-> Spring-> new legacy project . Template=> Spring MVC Project // Sample로 만들기 패키지는 com.class1.controller
 5) Preferences 에서 UTF-8로 설정 변경하기
 6) pom.xml에서 <properties>의 자바버전 1.8, 스프링프레임워크 버젼 4.1.0 으로 변경 후 저장.
 7) www.mvnrepository.com에서 카피해서 Project.pom.xml 의 <dependency> 마지막에 추가하기
       ->
        MySQL Connector/J 6.0.6 버젼,  mybatis 3.4.6버젼, mybatis spring 1.3.2버젼 , Spring jdbc 5.1.5 버젼 , 
	Spring TestContext Framework 5.1.5 버젼  (★★★※ 버젼을 ${org.springframework-version} 로 적어서 알아서 해당하는 버젼을 적용토록 한다)

	※디펜던시 test 버젼인 junit은 버젼을 4.7에서 4.12로 변경
 8) 프로젝트 우클릭 Properties -> Project Facets -> Java Version을 1.8로 변경
 9) root-context.xml(웹과 관련없는 환경 관련) -> Namespaces에서 [ aop, beans , context, jdbc, mybatis-spring ] 체크 (source 부분에 자동으로 생성됨)
10) root-context.xml 의 source 부분에서 MySQL datasource 부분 추가하기(DB연결될 Bean 등록함)
	
	<!-- MySQL datasource -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/bookshopdb?useSSL=false&amp;serverTimezone=UTC"></property>
		<property name="username" value="bookmaster"></property>
		<property name="password" value="1111"></property>
	</bean>
	<!-- mybatis SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
11) MySQL 연동 테스트하기 --
	1) src/test/java 에서 패키지 내에 Test 클래스 생성.
	2) 프로젝트 우클릭 프로퍼티 = 자바 빌드패쓰 = 라이브러리 탭선택 = add library -> JUnit4 추가
생략


 ※ Maven 빌드 에러 발생시 주요 원인
- Java Build Path 에서 jdk 버전을 1.8로 설정
- Project Facets에서 jdk 버전을 1.8로 설정
- 프로젝트 우클릭 Properties -> Deployment Assembly -> Add -> Java Build Path Entries -> Maven Dependencies 추가.
- pom.xml 에서 spring version을 조정한다.
- 프로젝트 clean, server clean, Clean Tomcat WorkDirectory
- 프로젝트를 선택 후 우클릭 -> Maven -> Update Project . (Force Update ... 를 체크하여 강제로 전부 업데이트 덮어쓰기)
- STS 를 종료한 후에 메이븐 저장소 (/.m2)폴더를 삭제한 후에 STS를 재시작한다. 



 ※ C->사용자->user->.m2 -> repository에 라이브러리 다운 받은것이 들어감


====================
------- 2일차 ------
====================
- ApplicationContext 인터페이스는 메시지, 이벤트, 프로필/환경 변수등을 처리할 수 있는 기능을 추가로 정의하고 있다.
- GenericXmlApplicationContext : XML로부터 객체 설정 정보를 가져온다.
  어떤 구현 클래스를 사용하던간에 각 구현 클래스는 설정 정보로부터 빈(Bean)이라고 불리는 객체를 생성하고 그 객체를 내부에 보관한다.
- 싱글톤(singleton) : 똑같은 이름의 객체는 하나만 유지함.. (?)

-★ [ DI : Dependency Injection ] 의존주입 => "부품 조립" 객체간의 의존.
	한 클래스가 다른 클래스의 메소드를 실행할 때, 이를 '의존한다'고 표현. (변경에 영향을 받는 관계)

  ㅇ 의존하는 대상이 있으면 그 대상을 구하는 방법이 필요함 -> 
	-) 의존하는 대상을 직접 생성하여 사용.( new class ).. 강하게 결함됨.

  ㅇ 다른 방법으로 의존성 낮추기 (DI를 통한 의존 처리) ->
	-) 


 ※ pom.xml
- <artifactId> : 프로젝트의 식별값

※스프링은 별도의 설정을 하지 않는 경우 한 개의 빈 객체만을 생성하며,
  이들 빈 객체들이 싱글톤(singleton) 범위를 갖는다고 표현한다.
  스프링은 기본적으로 한 개의 <bean> 태그에 대해 한 개의 빈 객체를 생성한다.



====================
------- 3일차 ------
====================
DI의 종류.
	[DI방식: 생성자 방식] //<constructor-arg> 태그를 사용함

	[DI방식: 설정 메서드 방식] == setter injection // <property> 태그를 사용함.
set으로 시작하는 프로퍼티 설정 메서드를 통해서 의존 객체를 주입 받는 방법.
- 프로퍼티 설정 메서드는 아래와 같은 형식을 가진다.
 ㅇ 메서드 이름이 set으로 시작한다.
 ㅇ set 뒤에는 프로퍼티 이름의 첫 글자를 대문자로 치환한 이름을 사용한다.
 ㅇ 한 개의 파라미터를 가지며, 파라미터의 타입은 프로퍼티의 타입과 같다.

 프로퍼티 이름 : memberDao
 프로퍼티 타입 : MemberDao
 public void setMemberDao(MemberDao dao)


 property란 JavaBeans 규약에 정의된 프로퍼티를 뜻한다. Bean이란 재사용 가능한 객체를 명명한 것.
이벤트, 기타 기능(메서드)으로 구성된다. 프로퍼티는 빈이 관리하는 데이터!

- 프로퍼티 명명 규칙
 ㅇ 프로퍼티 값을 구하는 메서드는 get으로, 변경은 set으로 시작한다.
 ㅇ get set 뒤에 이름의 첫 글자를 대문자로 함.
 
<property> 태그 : name = 의존 객체를 주입할 때 사용할 설정 메서드의 프로퍼티 이름
		  ref  = 주입할 의존 객체에 해당하는 Bean 객체의 식별값


[root-context.xml]
웹과 관련되지 않은 자원들에 대한 설정을 입력하는 파일.( MySQL과 MyBatis에 대한 설정을 한다. )

[DataSource]: MySQL과 연결을 담당
[SqlSessionFactoryBean]: JDBC Connection 을 처리하는 기능
[SqlSessionTemplate]: 기본적인 트랜잭션 관리, 쓰레드 처리 안정성 등을 보장.    	DB의 연결과 종료를 관리. 등록해두면 자동화된다.



====================
------- 4일차 ------
====================

- class에서 메모리에 생성되는 우선순위 : 변수 -> 초기화블럭 -> 생성자 -> 기타 메서드 등
- static 변수는 main에서 초기화 가능.  className.int = 10;


[MemberDAOImpl.java]
SqlSession을 주입 받아서 memberMapper.xml에 등록한 쿼리문을 실행한다.

쿼리 실행 결과가 여러개의 데이터를 가져오게 되므로 List로 받아서 리턴한다.

MemberDAOImpl 작성 후 Bean으로 등록해야함-> Bean 등록을 위해 root-context.xml에 기술해준다.

MemberDAOImpl에 @Repository 어노테이션이 설정돼 있더라도, 스프링에서 해당 패키지를 스캔하지 않으면 Bean으로 등록되지 않는다.
따라서 root-context.xml에 Bean을 등록해야 함.


[SpringDBTest 의 전체적인 구조 및 구동]

- 스프링 MVC의 구조로 DAO(데이터 처리를 담당)에서 MyBatis(Connection과 SQL문 처리)를 호출
- 여기서 처리된 데이터를 VO(데이터를 전달하는 역할) 객체에 담아서 Service, Controller를 거쳐 View로 보냄.

View  : 화면
Controller: 화면에서 요청한 URL을 맵핑.
Service : 비즈니스 로직, 기능적인 부분을 구현.
DAO : 데이터 처리를 담당.  하나의 DAO는 하나의 테이블과 연결되어 데이터를 처리함.

1. 기본설정
	- 프로젝트 생성 및 설정, MySQL, MyBatis 연동에 대한 셋팅 
	- 프로젝트 생성 후 pom.xml을 수정
	- 스프링, 자바의 버전을 수정.
	- 각종 라이브러리 dependency를 추가.
	- (root-context.xml)를 수정   : MySQL, MyBatis 연동과 관련된 것을 기술한다.
	 MySQL : DataSource == DB접속에 관련된 정보
	 MyBatis : SqlSessionFactoryBean == 사용 가능토록 property에 대한 설정. 읽어오는 부분과 SQL문을 작성해 둘 mapper.xml 파일을 읽어오는 부분 추가

	 MyBatis 로그를 위한 작업
	- (root-context.xml)의 MySQL DataSource 부분에서 로그에 대한 부분을 추가.
	- pom.xml에 log4jdbc-log4j2 라이브러리를 추가.
	- src/main/resources 아래에 log4jdbc-log4j2.properties 와 logback.xml 파일을 생성.
	- log4j.xml 파일에서 필요한 부분을 수정함.(메시지의 범위: warn, info, error, debug 등)
	

2. MyBatis 설정 파일 및 mapper.xml 파일 추가
	- src/main/resources 아래에 mybatis-config.xml 과, mappers 폴더를 만들어서 안에는 *Mapper.xml 파일을 만든다.
	

====================
------- 5일차 ------
====================

[@Autowired 에노테이션을 이용한 의존 자동 주입] 
	설정에 의존 객체를 명시하지 않아도 스프링이 필요한 의존 빈 객체를 자동 주입하게 된다.

 - 자동 주입 기능을 사용하려면,
	1. 자동 주입 대상에 @Autowired 를 사용
	2. XML설정에 <context:annotation-config/> 설정을 추가

- 자동 주입에서의 타입 매칭
	동일한 타입의 Bean객체를 찾아서 주입 대상으로 선택하는 것으로 생각할 수 있다.
	정확히는 '해당 타입에 할당할 수 있는 Bean 객체를 찾아서 자동 주입 대상으로 선택함'.
	
	
[@Qualifier 에노테이션을 이용한 의존 객체 선택]
사용할 의존 객체를 선택할 수 있도록 해준다.
	1. 설정에서 Bean의 한정자 값을 설정한다
	2. @Autowired가 적용된 주입 대상에 @Qualifier 한정자 값을 설정한다.(value)

	
[@Autowired(required = false)]
	필수 여부 지정. 의존 객체가 주입되지 않는다고 생각하면 안된다.
	속성값이 false인 경우에도 주입할 객체가 존재하면 주입함.
	단지 주입할 의존객체가 존재하지 않아도 Exception을 발생시키지 않는다.

### [@Autowired의 적용 순서] ###
	실제 의존 객체를 찾는 순서
	1. 타입이 같은 Bean 객체를 검색한다
	1-1. 한 개면 그 객체를 사용함.
	1-2. @Qualifier가 명시돼 있을 경우 @Qualifier와 같은 값을 가진 Bean 객체를 사용.
	
	2. 타입이 같은 Bean 객체가 두 개 이상 존재하면, @Qualifier로 지정한 Bean 객체를 찾아 사용함.
	
	3. 타입이 같은 Bean 객체가 존재하고 @Qualifier가 없을 때는 이름이 같은 Bean 객체를 찾아 사용함.

	- 3가지 경우에 해당 되지 않는 때는 스프링 컨테이너가 Exception을 발생시킴
			

@Autowired은 파라미터가 두 개 이상인 메서드나 생성자에도 적용 가능.  타입을 이용해서 주입할 객체를 검색한다.
@Qualifier를 적용할때는 해당 파라미터 바로 앞에 직접 지정 가능.

@Resource 를 이용한 의존 자동 주입. Bean의 이름을 이용해서 주입할 객체를 검색한다.
	1. 자동 주입 대상에 @Resource를 사용하고
	2. XML 설정에 <context:annotation-config /> 설정을 추가한다.
	Bean의 이름을 사용해서 빈 객체를 찾기 때문에 name으로 이름을 지정한다.

@Resource 적용되는 순서
	1. name 속성에 지정한 빈 객체를 찾고, 해당 객체를 주입할 객체로 사용한다.
	2. name 속성이 없을 경우, 동일한 타입을 갖는 Bean 객체를 찾아서 사용한다.
	3. name 속성이 없고 동일 타입이 2개 이상일 때, 같은 이름을 가진 빈 객체를 찾아서 사용한다.
	4. name 속성이 없고, 동일 타입 2개 이상, 같은 이름 빈 객체 없을 시 @Qualifier를 이용해서 주입할 Bean 객체를 찾는다.

@ 자동 주입보다 <> 명시적 의존 주입이 우선순위가 높다



[자바 코드를 이용한 설정]	
xml 문법 대신 자바 코드를 이용해서 Bean 객체를 생성하고 프로퍼티를 설정하여, GenericXmlApplicationContext 클래스 대신에 
AnnotationConfigApplicationContext 클래스를 이용해 컨테이너를 생성한다.
 생성자에는 설정으로 사용할 자바 설정 클래스를 전달하면 된다.

###   자바 설정을 사용할 경우에는 별도 설정을 하지 않더라도 애노테이션을 이용한 자동 주입 기능이 활성화 됨.




			

	
	
	
	
	
		

		
	
	
	
	
	
	
	
	
































